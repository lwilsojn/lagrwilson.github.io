// Generated by CoffeeScript 1.6.3
(function() {
  var AccordionController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  AccordionController = (function(_super) {
    __extends(AccordionController, _super);

    AccordionController.prototype.className = 'AccordionController';

    function AccordionController() {
      this.onCloseEvent = __bind(this.onCloseEvent, this);
      this.onClose = __bind(this.onClose, this);
      this.onToggle = __bind(this.onToggle, this);
      AccordionController.__super__.constructor.apply(this, arguments);
      this.open = false;
      this.configToggles();
      this.configHandles();
      this.configCloseButtons();
      this.configContainer();
      this.configOpenState();
      Spine.bind('event_closed', this.onCloseEvent);
    }

    AccordionController.prototype.configToggles = function() {
      var all_toggles, parent, toggle, _i, _j, _len, _len1, _ref, _results;
      this.el_toggles = [];
      all_toggles = this.el.find("*[data-accordion='toggle']");
      for (_i = 0, _len = all_toggles.length; _i < _len; _i++) {
        toggle = all_toggles[_i];
        parent = $(toggle).parents('*[data-accordion="accordion"]').eq(0);
        if ($(parent).is(this.el)) {
          this.el_toggles.push($(toggle));
        }
      }
      _ref = this.el_toggles;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        toggle = _ref[_j];
        _results.push(toggle.bind('click', this.onToggle));
      }
      return _results;
    };

    AccordionController.prototype.configHandles = function() {
      var all_handles, handle, i, parent, _i, _j, _len, _len1, _ref, _results;
      this.el_handles = [];
      all_handles = this.el.find("*[data-accordion='handle']");
      for (i = _i = 0, _len = all_handles.length; _i < _len; i = ++_i) {
        handle = all_handles[i];
        parent = $(handle).parents('*[data-accordion="accordion"]').eq(0);
        if ($(parent).is(this.el)) {
          this.el_handles.push($(handle));
        }
      }
      _ref = this.el_handles;
      _results = [];
      for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
        handle = _ref[i];
        if (!handle.parents('*[data-accordion="toggle"]')) {
          _results.push(handle.bind('click', this.onToggle));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    AccordionController.prototype.configCloseButtons = function() {
      var all_closeButtons, closeButton, parent, _i, _j, _len, _len1, _ref, _results;
      this.el_closeButtons = [];
      all_closeButtons = this.el.find("*[data-accordion='close']");
      for (_i = 0, _len = all_closeButtons.length; _i < _len; _i++) {
        closeButton = all_closeButtons[_i];
        parent = $(closeButton).parents('*[data-accordion="accordion"]').eq(0);
        if ($(parent).is(this.el)) {
          this.el_closeButtons.push($(closeButton));
        }
      }
      _ref = this.el_closeButtons;
      _results = [];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        closeButton = _ref[_j];
        _results.push(closeButton.bind('click', this.onClose));
      }
      return _results;
    };

    AccordionController.prototype.configContainer = function() {
      return this.container = this.el.find("*[data-accordion='container']").eq(0);
    };

    AccordionController.prototype.configOpenState = function() {
      var isFirstTech, isOpen;
      isOpen = this.el.attr("data-accordion-state") === 'open';
      isFirstTech = this.el.hasClass('tech-accordion') && this.el.prev().hasClass('tech-header');
      if (isOpen || isFirstTech) {
        return this.snapOpenContainer();
      }
    };

    AccordionController.prototype.onToggle = function() {
      if (this.open) {
        return this.closeContainer();
      } else {
        return this.openContainer();
      }
    };

    AccordionController.prototype.onClose = function() {
      return this.closeContainer();
    };

    AccordionController.prototype.onCloseEvent = function(elm) {
      if ((this.isParent(this.el, elm)) && this.open === true) {
        return this.closeContainer(true);
      }
    };

    AccordionController.prototype.snapOpenContainer = function() {
      var handle, toggle, _i, _j, _len, _len1, _ref, _ref1;
      this.container.css('height', 'auto');
      _ref = this.el_handles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handle = _ref[_i];
        handle.addClass('up').removeClass('down');
      }
      _ref1 = this.el_toggles;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        toggle = _ref1[_j];
        toggle.find("span").html("-");
        toggle.addClass('open');
      }
      this.container.addClass("open");
      return this.open = true;
    };

    AccordionController.prototype.openContainer = function() {
      var handle, toggle, _i, _j, _len, _len1, _ref, _ref1;
      this.container.hide();
      this.container.css('height', 'auto');
      _ref = this.el_handles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handle = _ref[_i];
        handle.addClass('up').removeClass('down');
      }
      _ref1 = this.el_toggles;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        toggle = _ref1[_j];
        toggle.find("span").html("-");
        toggle.addClass('open');
      }
      this.container.addClass("open");
      this.container.slideDown('fast');
      return this.open = true;
    };

    AccordionController.prototype.closeContainer = function(suppress_event) {
      var handle, toggle, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.el_handles;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        handle = _ref[_i];
        handle.addClass('down').removeClass('up');
      }
      _ref1 = this.el_toggles;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        toggle = _ref1[_j];
        toggle.find("span").html("+");
        toggle.removeClass('open');
      }
      this.container.slideUp('fast');
      this.container.removeClass("open");
      this.open = false;
      if (!suppress_event) {
        return Spine.trigger('event_closed', this.el);
      }
    };

    AccordionController.prototype.isParent = function(childElm, parentElm) {
      var parent, _i, _len, _ref;
      _ref = childElm.parents();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent = _ref[_i];
        if ($(parent).is(parentElm)) {
          return true;
        }
      }
      return false;
    };

    return AccordionController;

  })(Spine.Controller);

  window.AccordionController = AccordionController;

  $(function() {
    $('*[data-accordion="accordion"]').each(function() {
      var a;
      return a = new window.AccordionController({
        el: this
      });
    });
    $('.apply').click(function() {
      if ($('#application .accordion-toggle').is('.open')) {

      } else {
        return $('#application .accordion-toggle').click();
      }
    });
    return $('.rules-open').click(function(a) {
      var hash, rulesAccordionToggle, theRules;
      theRules = $(this).parents('.reqs-container').find('.the-rules');
      rulesAccordionToggle = theRules.find('.accordion-toggle');
      hash = theRules.attr('id');
      if (rulesAccordionToggle.is('.open')) {
        a.preventDefault();
      } else if (!theRules.is(':in-viewport')) {
        $(this).attr('href', '#' + hash);
        return rulesAccordionToggle.click();
      } else {
        a.preventDefault();
        return rulesAccordionToggle.click();
      }
    });
  });

}).call(this);
